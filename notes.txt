HotKeys
Select same word multiple times Ctrl + D


3 main resources
users
profiles
posts

will need separate files for these because it will get to messy


Using postman (http client) enables different types of http requests 
    - like post request to register route 
    - authorization headers
    - fantastic piece of software to deal with back end api

json webtoken module
    - creates token,
    - passport will validate it and extract the user's information from it

email & password login
    - localhost:5000/api/users/register
    - validating email and password and make sure it exists 

12-Creating The JWT
    - create a token when  `res.json({ msg: "Success" });`

13-Passport JWT Authentication Strategy
    - login, will retrieve token for a user
    - then we tried to access a protected route, we did it without a token and got unauthorized back
    - then we added the correct token and now its responding with the user 
    - accepting tokens that will validate a user and access our protected routes 
    
14- validation handlers 1

    -validating login and user modules

15- validation handlers 2

    -finishing up validation for register and login 
    

17 - creating the profile module

    -created the profile model and exported it .
    
18 - Current user profile route

    - creating the profile route in routes/api/profile.js to handle back end

19  Create & Update Profile Routes

    - created post route to actually create the profile 

    .profile.js 
        -get everything in request.body
        - fill profile fields 
        - search for user by user.id
        - if they have a profile they are going to update it 
        - if they dont. Check if there is no handle by that name
                if there is it will send back an error

                and if not it will go ahead and create the profile

20 Profile Field Validations

    - 

21 More profile api routes

    - Getting user profile by handle
    - Get user profile by id
    - Get all profiles and serve them by json array
    - can change to private if wanting to
    - up to you on how long you want tokens to last

22 Add Experience & Education Routes

    - to an array(profile) and delete them 

23 Delete education and Experience

    - allows a user to delete education and experience and user and profile

24 Creating the post model
    - might want to add different models like video or images that will be possible to upload 
    - going to create post that will be able to get liked  and commented on 

26-get-and-delete-post-routes

    - get and delete post routes
    
 27-post-like-and-unlike-routes
    - like and remove likes

28-add-and-remove-comment-routes
    - create the ability to add and remove comments 

30-implementing-react
    - incorporating react     
    - npm i concurrently (enables us to incorporate the front end and the back end at the same time)
        - allows us to run a script and have multiple commands 
    -  "dev": "concurrently \"npm run server\" \"npm run client\""
                    server and client will be ran at the same time

    - npm run dev

    localhost:5000 is back end
    localhost:3000 is front end
    
32-basic-layout
    - created the basic layout which included the navbar, landing, and Footer.js files components and added it to app.js

33-react-router-setup
    - we need a router because we are going to have multiple routes 
    - million ways to do a spcefic things. All about preference 
    - want to create routes with the components 
    - will create private routes in the future 

35-creating-the-login-form-with-state
    - implemented the creation of a login form with states 

37-testing-registration-with-our-form
    - using axios (frontend) to retrieve https requests 
    - easier (less code)

38-error-handling-and-display)
    - will remove axios for backend communication. 
        -Will implement redux to take its place
        - using to test api and set up error handling 
    - will implement form validation in bootstrap 
    - npm i classnames (if a certain something is true then add this class to it)
    - implementing backend error handling to our front end 

What is redux?
    - we create components which can be ui through react
    - Redux comes in when you need application level state
        - you need to share data between components
        - ex) to do list
            have 1 component that lists all the to dos 
            have a form componenet that accesses the to dos 

            - want to access to do state from your list component 

            - instead of passing things from componenet to compoennt you get a single source of truth 
            that you can dispatch to all your compoentnts
             

             - things you want to share between compoenents

             - going to have an auth state

             - profile state that will hold all profile things

                    -stuff we want to share 


40-redux-store-chrome-extension-setup

npm i redux react-redux redux-thunk
- redux and store intialized
- create auth
- we want to register a user through an action 

41-redux-action-and-reducer-workflow
-everything we do are going to be redux actions 

42-registration-and-the-error-reducer
- went throug  work flow
 - commit and action register user
 in action file create a type aof test dispatch- 
 we then manipulate state
 then wwe mapped states to props and set auth to prop in our componenet 
    - if user exists out oput form if it doesnt dont output form 



43-redux-login-action-and-set-current-user

-try to remember the work flow from back end
-we need to rewquest token then we need token to access any protected routes 
    - take token once logged in and store it in local storage 
    - if we are logged in. If the token is in local storage and validated we are going to send that with everythin grequest we make
        -if we are logged in we can access any protected routes 
    -set up logg out that it will destroy it in local storage so that we cant make requests
    - complex 

    npm i jwt-decode
        - token  = bearer . This will extract user from that 

- implemented login through redux but didn't implement it through the component form yet 
        
44-login-form-functionality
- implement it through the component form yet 

45-logout-and-conditional-navbar-links
- last action it auth actions 
- login, logout is complete, registration is complete
- will start to work with profile state 

46-text-field-group-input-component
- start working with profile state
- create a profile reducer
- create dashboard

47-profile-reducer-and-get-current-profile)
- work on profile state
- create dashboard that will feth login user's profile

48-spinner-component-and-dashboard-start
-created the dashboard component to its fullest

49-private-route-setup
- create protected routes 
- have routes only users can access 
- switch allows us to redirect when we log out 


50-createProfile-component-route
- create ability to have a profile 
- create component and route for it 

51-form-field-components
- work on form input componenets 
- textarefield, input, selectlistgroup

52-create-profile-form
- bring in form field groups and start implementing forms 
- create all fields in create profile component

53-create-profile-functionality
- finished created profile fields and implementing it into web app

54-profile-actions-component-and-delete-account
- can now delete an account

55-edit-profile-component
- work on edit profile components 

56-add-experience-form
- add feature to add experiences and education from dashboard
- creating lots of components 
- programming is repetitive 

57-add-experience-functionality
- will be ale to implmenet add exprience functionality

58-add-education-form-and-functionality
- adding education which will be similar to experience functionality

59-dashboard-experience-display-and-delete
- added feature to display expererience in profile 
- npm i react-moment
- npm i moment

60-dashboard-education-display-and-delete
- add a feature to display education credientials and then have the ability to delete them

61-profiles-component-and-getProfiles-action
    -created features to view the profile component/page

62-profile-items
-created a feature to view all profiles 

63-profile-by-handle-and-sub-components
- each profile will go to their respected handle 


64-profile-header
- display subcompoents of profile
- want to display header of a profile 

65-profile-about-and-credentials
- incorporate about and credentials profile features

66-profile-github-and-touch-ups)
- if user puts in github user name, it will show their repos

67-postState-and-addPost-action
- want users to post and comment 
- immplemented an the add post action functionality which will hit end point to get the post
- set up post state with reducer 

68-post-and-form-component
- implement component (main post component)(post form component to add a post)

69-getPosts-action-and-postFeed-component
- can add post through application now
- implement getPosts actions

70-post-item-component
- can display posts now 

71-delete-like-and-unlike-post
-implement delete, like, and unlike posts feature


heroku login
heroku create
git push heroku master
heroku open
